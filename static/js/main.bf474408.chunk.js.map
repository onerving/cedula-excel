{"version":3,"sources":["components/CedulaFinder.js","components/BasicDropzone.js","components/CedulaSearch.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","getLicenseInfo","license","get","proxy","params","fl","rows","wt","q","crossDomain","makeServerQuery","then","res","console","log","data","response","docs","BasicDropzone","props","_useDropzone","useDropzone","accept","multiple","onDropAccepted","acceptedFiles","getRootProps","getInputProps","files","map","file","react_default","a","createElement","key","path","size","className","FirstStepCard","Card","CardBody","CardTitle","CardSubtitle","components_BasicDropzone","onExcelUploaded","ColSelectInput","newColumnOption","newColumnLetter","value","FormGroup","Label","title","Input","name","onChange","type","defaultValue","disabled","columns","col","CedulaSearch","state","query","result","worksheet","validationState","handleInputChange","e","_e$target","target","_this","setState","Object","defineProperty","excelUploaded","f","reader","FileReader","scope","assertThisInitialized","onload","event","Uint8Array","workbook","XLSX","read","Sheets","SheetNames","jsonWorksheet","utils","sheet_to_json","header","entries","lastColumn","slice","nextLetter","String","fromCharCode","charCodeAt","readAsArrayBuffer","validateLicenses","preventDefault","_this$state","licenseCol","validationCol","validMark","invalidMark","results","_ref","asyncToGenerator","regenerator_default","mark","_callee","item","index","info","stringLicense","doTheyMatch","wrap","_context","prev","next","abrupt","sent","numCedula","toString","localeCompare","stop","_x","_x2","apply","this","arguments","Promise","all","completed","sheet","json_to_sheet","skipHeader","book_append_sheet","writeFile","_this$state2","requirements","button","Button","color","onClick","spinner","Fragment","Spinner","submitArea","secondStepCard","Form","Row","form","Col","md","placeholder","Container","Component","App","fluid","components_CedulaSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2WAAMA,EAAQC,EAAQ,IAiBf,SAASC,EAAeC,GAC3B,OAhBG,SAAyBA,GAI5B,OAAOH,EAAMI,IAAIC,yFAAW,CACxBC,OAAO,CACHC,GAAG,UACHC,KAAM,EACNC,GAAI,OACJC,EAAGP,GAEPQ,aAAa,IAKVC,CAAgBT,GAASU,KAAK,SAAAC,GAEjC,OADAC,QAAQC,IAAIF,GACLA,EAAIG,KAAKC,SAASC,KAAK,iBCWvBC,MA3Bf,SAAuBC,GAAM,IAAAC,EAC4BC,YAAa,CAC9DC,OAAQ,aACRC,UAAU,EACVC,eAAgBL,EAAMK,iBAHnBC,EADkBL,EAClBK,cAAeC,EADGN,EACHM,aAAcC,EADXP,EACWO,cAO9BC,EAAQH,EAAcI,IAAI,SAAAC,GAAI,OAChCC,EAAAC,EAAAC,cAAA,MAAIC,IAAKJ,EAAKK,MACTL,EAAKK,KADV,MACmBL,EAAKM,KADxB,YAKJ,OACIL,EAAAC,EAAAC,cAAA,WAASI,UAAU,aACfN,EAAAC,EAAAC,cAAA,MAASP,EAAa,CAACW,UAAW,aAC9BN,EAAAC,EAAAC,cAAA,QAAWN,KADf,+DAIAI,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UAAKL,8HCsIrB,SAASU,EAAenB,GACpB,OACIY,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAAA,+CAEJF,EAAAC,EAAAC,cAACS,EAAA,EAAD,sFAEIX,EAAAC,EAAAC,cAAA,WAFJ,mGAKAF,EAAAC,EAAAC,cAACU,EAAD,CACInB,eAAgBL,EAAMyB,oBAO1C,SAASC,EAAe1B,GACpB,IAAM2B,EAAoB3B,EAAM4B,gBAC5BhB,EAAAC,EAAAC,cAAA,UACIC,IAAKf,EAAM4B,gBACXC,MAAO7B,EAAM4B,iBACf5B,EAAM4B,gBAHR,uBAD+C,KAKnD,OACIhB,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAWZ,UAAW,wBAClBN,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOb,UAAW,WAAYlB,EAAMgC,OACpCpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACIC,KAAMlC,EAAMkC,KACZC,SAAUnC,EAAMmC,SAChBC,KAAM,SACNC,aAAc,GAEdzB,EAAAC,EAAAC,cAAA,UAAQwB,UAAQ,EAACT,MAAO,GAAxB,4BACC7B,EAAMuC,QAAQ7B,IAAI,SAAC8B,GAAD,OACf5B,EAAAC,EAAAC,cAAA,UACIC,IAAKyB,EAAI,GACTX,MAAOW,EAAI,IACbA,EAAI,GAHN,MAGaA,EAAI,GAHjB,OAKHb,IAOFc,iNAvMXC,MAAQ,CACJC,MAAO,UACPC,OAAQ,GACRL,QAAS,GACTM,UAAW,KACXC,iBAAiB,KAGrBC,kBAAoB,SAACC,GAAM,IAAAC,EACHD,EAAEE,OAAjBhB,EADkBe,EAClBf,KAAML,EADYoB,EACZpB,MACXsB,EAAKC,SAALC,OAAAC,EAAA,EAAAD,CAAA,GACKnB,EAAQL,OAIjB0B,cAAgB,SAAC9C,GACb,IAAM+C,EAAI/C,EAAM,GACVgD,EAAS,IAAIC,WACbC,EAAKN,OAAAO,EAAA,EAAAP,CAAAF,GACXM,EAAOI,OAAS,SAASC,GACrB,IAAMlE,EAAO,IAAImE,WAAWD,EAAMZ,OAAON,QACnCoB,EAAWC,IAAKC,KAAKtE,EAAM,CAACwC,KAAM,UAClCS,EAAYmB,EAASG,OAAOH,EAASI,WAAW,IAGlDC,EAAgBJ,IAAKK,MAAMC,cAAc1B,EAAW,CAAC2B,OAAQ,MAG3DjC,EAAUc,OAAOoB,QAAQJ,EAAc,IACvCK,EAAanC,EAAQoC,OAAO,GAAG,GAAG,GAClCC,EAAaC,OAAOC,aAAaJ,EAAWK,WAAW,GAAK,GAClEpB,EAAMP,SAAS,CAACY,SAAUA,EAAUzB,QAASA,EAASM,UAAWwB,EAAezC,gBAAiBgD,KAErGnB,EAAOuB,kBAAkBxB,MAG7ByB,iBAAmB,SAACnB,GAChBA,EAAMoB,iBACN/B,EAAKC,SAAS,CAACN,iBAAiB,IAFN,IAAAqC,EAG6ChC,EAAKT,MAArEG,EAHmBsC,EAGnBtC,UAAWuC,EAHQD,EAGRC,WAAYC,EAHJF,EAGIE,cAAeC,EAHnBH,EAGmBG,UAAWC,EAH9BJ,EAG8BI,YAClDC,EAAU3C,EAAUnC,IAAV,eAAA+E,EAAApC,OAAAqC,EAAA,EAAArC,CAAAsC,EAAA9E,EAAA+E,KAAc,SAAAC,EAAOC,EAAMC,GAAb,IAAAjH,EAAAkH,EAAAC,EAAAC,EAAA,OAAAP,EAAA9E,EAAAsF,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,UACZ,IAAVP,EADsB,CAAAK,EAAAE,KAAA,eAAAF,EAAAG,OAAA,SACFT,GADE,cAEpBhH,EAAUgH,EAAKV,GAFKgB,EAAAE,KAAA,EAGNzH,EAAeC,GAHT,UAGpBkH,EAHoBI,EAAAI,KAI1B9G,QAAQC,IAAIb,GACZY,QAAQC,WAAWb,IAChBkH,IAAQA,EAAKS,UANU,CAAAL,EAAAE,KAAA,gBAOhBL,EAAgBnH,EAAQ4H,WACxBR,EAA+D,IAAhDD,EAAcU,cAAcX,EAAKS,WACtDX,EAAKT,GAAkBa,EAAeZ,EAAYC,EAT5Ba,EAAAG,OAAA,SAUfT,GAVe,eAY1BA,EAAKT,GAAiBE,EAZIa,EAAAG,OAAA,SAanBT,GAbmB,yBAAAM,EAAAQ,SAAAf,MAAd,gBAAAgB,EAAAC,GAAA,OAAArB,EAAAsB,MAAAC,KAAAC,YAAA,IAehBC,QAAQC,IAAI3B,GAAShG,KAAK,SAAA4H,GACtB,IAAMC,EAAQpD,IAAKK,MAAMgD,cAAcF,EAAW,CAACG,YAAW,IACxDvD,EAAWb,EAAKT,MAAMsB,SAC5BC,IAAKK,MAAMkD,kBAAkBxD,EAAUqD,EAAO,wBAC9CpD,IAAKwD,UAAUzD,EAAU,gBACzBb,EAAKC,SAAS,CAACN,iBAAiB,+EAK/B,IAAA4E,EACuDV,KAAKtE,MAA1D0C,EADFsC,EACEtC,WAAYC,EADdqC,EACcrC,cAAeC,EAD7BoC,EAC6BpC,UAAWC,EADxCmC,EACwCnC,YACvCoC,EAAgBvC,GAAcC,GAAiBC,GAAaC,EAC5DqC,EAAShH,EAAAC,EAAAC,cAAC+G,EAAA,EAAD,CACXC,MAAO,UACP1F,KAAM,SACNE,UAAWqF,EACXI,QAASf,KAAK/B,kBAJH,wBAMT+C,EAAUpH,EAAAC,EAAAC,cAACF,EAAAC,EAAMoH,SAAP,KACZrH,EAAAC,EAAAC,cAACoH,EAAA,EAAD,CAAS9F,KAAM,OAAQ0F,MAAO,YAC9BlH,EAAAC,EAAAC,cAAA,2DAEEqH,EAAgBnB,KAAKtE,MAAMI,gBAE7BkF,EAFgDJ,EAG9CQ,EAAmBpB,KAAKtE,MAAMG,UAChCjC,EAAAC,EAAAC,cAACM,EAAA,EAAD,KACIR,EAAAC,EAAAC,cAACO,EAAA,EAAD,KACIT,EAAAC,EAAAC,cAACQ,EAAA,EAAD,KACIV,EAAAC,EAAAC,cAAA,0DAEJF,EAAAC,EAAAC,cAACuH,EAAA,EAAD,KACIzH,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAKC,MAAI,GACL3H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAKC,GAAI,GACL7H,EAAAC,EAAAC,cAACY,EAAD,CACIa,QAASyE,KAAKtE,MAAMH,QACpBL,KAAM,aACNC,SAAU6E,KAAKjE,kBACff,MAAO,2CAGfpB,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAKC,GAAI,GACL7H,EAAAC,EAAAC,cAACY,EAAD,CACIa,QAASyE,KAAKtE,MAAMH,QACpBL,KAAM,gBACNC,SAAU6E,KAAKjE,kBACff,MAAO,iDACPJ,gBAAiBoF,KAAKtE,MAAMd,oBAIxChB,EAAAC,EAAAC,cAACwH,EAAA,EAAD,CAAKC,MAAI,GACL3H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAKC,GAAI,GACL7H,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAWZ,UAAW,wBAClBN,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOb,UAAW,WAAlB,iDACAN,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACIC,KAAM,YACNC,SAAU6E,KAAKjE,kBACf2F,YAAa,wBACbtG,KAAM,WAIlBxB,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,CAAKC,GAAI,GACL7H,EAAAC,EAAAC,cAACgB,EAAA,EAAD,CAAWZ,UAAW,wBAClBN,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAOb,UAAW,WAAlB,gDACAN,EAAAC,EAAAC,cAACmB,EAAA,EAAD,CACIC,KAAM,cACNC,SAAU6E,KAAKjE,kBACf2F,YAAa,0BACbtG,KAAM,YAKtBxB,EAAAC,EAAAC,cAACwH,EAAA,EAAD,KACI1H,EAAAC,EAAAC,cAAC0H,EAAA,EAAD,KACKL,OApDwB,KA2DjD,OACIvH,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,KACI/H,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAACK,EAAD,CAAeM,gBAAiBuF,KAAKzD,gBACpC6E,UAjJUQ,aCMZC,MARf,WACI,OACIjI,EAAAC,EAAAC,cAAC6H,EAAA,EAAD,CAAWG,OAAK,EAAC5H,UAAW,sDACxBN,EAAAC,EAAAC,cAACiI,EAAD,QCGQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECXNC,IAASC,OAAO1I,EAAAC,EAAAC,cAACyI,EAAD,MAASC,SAASC,eAAe,SD0H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpK,KAAK,SAAAqK,GACjCA,EAAaC","file":"static/js/main.bf474408.chunk.js","sourcesContent":["const axios = require('axios/index');\n\nexport function makeServerQuery(license){\n    const proxy = 'https://cors-anywhere.herokuapp.com/';\n    const url = \"http://search.sep.gob.mx/solr/cedulasCore/select?'\";\n\n    return axios.get(proxy+url, {\n        params:{\n            fl:'*,score',\n            rows: 1,\n            wt: 'json',\n            q: license,\n        },\n        crossDomain: true,\n    });\n}\n\nexport function getLicenseInfo(license){\n    return makeServerQuery(license).then(res => {\n        console.log(res);\n        return res.data.response.docs[0];\n    });\n}\n\n\n","import React from 'react';\nimport {useDropzone} from 'react-dropzone';\n\n\nfunction BasicDropzone(props){\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone ({\n        accept: '.xls,.xlsx',\n        multiple: false,\n        onDropAccepted: props.onDropAccepted\n\n    });\n\n    const files = acceptedFiles.map(file => (\n        <li key={file.path}>\n            {file.path} - {file.size} bytes\n        </li>\n    ));\n\n    return (\n        <section className=\"container\">\n            <div {...getRootProps({className: 'dropzone'})}>\n                <input {...getInputProps()} />\n                Arrastra tu archivo aqu√≠, o da click para seleccionarlo.\n            </div>\n            <aside>\n                <ul>{files}</ul>\n            </aside>\n        </section>\n    );\n}\n\nexport default BasicDropzone;","import React, {Component} from 'react';\nimport {getLicenseInfo} from \"./CedulaFinder\";\nimport BasicDropzone from \"./BasicDropzone\";\nimport {Button, Card, CardBody, CardTitle, Col, Container, Form, FormGroup, Input, Row, Spinner} from 'reactstrap';\nimport XLSX from 'xlsx';\nimport Label from \"reactstrap/es/Label\";\nimport CardSubtitle from \"reactstrap/es/CardSubtitle\";\n\nclass CedulaSearch extends Component {\n    state = {\n        query: '1629426',\n        result: {},\n        columns: [],\n        worksheet: null,\n        validationState: false,\n    };\n\n    handleInputChange = (e) => {\n        let {name, value} = e.target;\n        this.setState({\n            [name] : value\n        })\n    };\n\n    excelUploaded = (files) =>{\n        const f = files[0];\n        const reader = new FileReader();\n        const scope = this;\n        reader.onload = function(event) {\n            const data = new Uint8Array(event.target.result);\n            const workbook = XLSX.read(data, {type: 'array'});\n            const worksheet = workbook.Sheets[workbook.SheetNames[0]];\n            // Obtenemos un arreglo del excel, con jsons de cada fila.\n            // La opci√≥n A nos da un json del tipo {<columna>: <contenido>, B: 'algo'}\n            let jsonWorksheet = XLSX.utils.sheet_to_json(worksheet, {header: 'A'});\n            // Guardamos la hoja de trabajo y sus nombres de columnas en el estado\n\n            const columns = Object.entries(jsonWorksheet[0]);\n            const lastColumn = columns.slice(-1)[0][0];\n            const nextLetter = String.fromCharCode(lastColumn.charCodeAt(0) + 1);\n            scope.setState({workbook: workbook, columns: columns, worksheet: jsonWorksheet, newColumnLetter: nextLetter});\n        };\n        reader.readAsArrayBuffer(f);\n    };\n\n    validateLicenses = (event) => {\n        event.preventDefault();\n        this.setState({validationState: true});\n        const {worksheet, licenseCol, validationCol, validMark, invalidMark} = this.state;\n        const results = worksheet.map(async (item, index) => {\n            if (index === 0) return item;\n            const license = item[licenseCol];\n            const info =  await getLicenseInfo(license);\n            console.log(license);\n            console.log(typeof license);\n            if(info && info.numCedula){\n                const stringLicense = license.toString();\n                const doTheyMatch = (stringLicense.localeCompare(info.numCedula) === 0);\n                item[validationCol] = (doTheyMatch) ? validMark : invalidMark;\n                return item;\n            }\n            item[validationCol] = invalidMark;\n            return item;\n        });\n        Promise.all(results).then(completed =>{\n            const sheet = XLSX.utils.json_to_sheet(completed, {skipHeader:true});\n            const workbook = this.state.workbook;\n            XLSX.utils.book_append_sheet(workbook, sheet, \"c√©dulas validadas\");\n            XLSX.writeFile(workbook, 'editado.xlsx');\n            this.setState({validationState: false});\n            }\n        );\n    };\n\n    render() {\n        const {licenseCol, validationCol, validMark, invalidMark} = this.state;\n        const requirements = (licenseCol && validationCol && validMark && invalidMark);\n        const button = <Button\n            color={'primary'}\n            type={'submit'}\n            disabled={!requirements}\n            onClick={this.validateLicenses}\n        >Verificar c√©dulas</Button>;\n        const spinner = <React.Fragment>\n            <Spinner type={'grow'} color={'primary'}/>\n            <p>Verificando. Esto puede tardar unos segundos.</p>\n        </React.Fragment>;\n        const submitArea =  (!this.state.validationState) ? button\n            :\n            spinner;\n        const secondStepCard = (!this.state.worksheet) ? null :\n            <Card>\n                <CardBody>\n                    <CardTitle>\n                        <h4>Paso 2: Configura de acuerdo a tu documento</h4>\n                    </CardTitle>\n                    <Form>\n                        <Row form>\n                            <Col md={6}>\n                                <ColSelectInput\n                                    columns={this.state.columns}\n                                    name={'licenseCol'}\n                                    onChange={this.handleInputChange}\n                                    title={'Columna donde est√°n las c√©dulas'}\n                                />\n                            </Col>\n                            <Col md={6}>\n                                <ColSelectInput\n                                    columns={this.state.columns}\n                                    name={'validationCol'}\n                                    onChange={this.handleInputChange}\n                                    title={'Columna donde se marcar√° la verificaci√≥n'}\n                                    newColumnLetter={this.state.newColumnLetter}\n                                />\n                            </Col>\n                        </Row>\n                        <Row form>\n                            <Col md={6}>\n                                <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n                                    <Label className={'mr-sm-2'}>Poner en la fila de una c√©dula verificada:</Label>\n                                    <Input\n                                        name={'validMark'}\n                                        onChange={this.handleInputChange}\n                                        placeholder={'V√°lida, 1, o, etc.'}\n                                        type={'text'}\n                                    />\n                                </FormGroup>\n                            </Col>\n                            <Col md={6}>\n                                <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n                                    <Label className={'mr-sm-2'}>Poner en la fila de una c√©dula rechazada:</Label>\n                                    <Input\n                                        name={'invalidMark'}\n                                        onChange={this.handleInputChange}\n                                        placeholder={'Inv√°lida, 0, x, etc.'}\n                                        type={'text'}\n                                    />\n                                </FormGroup>\n                            </Col>\n                        </Row>\n                        <Row>\n                            <Col>\n                                {submitArea}\n                            </Col>\n                        </Row>\n                    </Form>\n                </CardBody>\n            </Card>;\n\n        return (\n            <Container>\n                <h3>Verificador de c√©dulas profesionales</h3>\n                <FirstStepCard onExcelUploaded={this.excelUploaded}/>\n                {secondStepCard}\n            </Container>\n        );\n    }\n}\n\nfunction FirstStepCard (props) {\n    return (\n        <Card>\n            <CardBody>\n                <CardTitle>\n                    <h4>Paso 1: Sube tu archivo de Excel</h4>\n                </CardTitle>\n                <CardSubtitle>\n                    La primera hoja de trabajo debe de tener las c√©dulas que quieres verificar.\n                    <br/>\n                    Se crear√° una copia de la primera hoja y se le a√±adir√°n los resultados de tu consulta.\n                </CardSubtitle>\n                <BasicDropzone\n                    onDropAccepted={props.onExcelUploaded}\n                />\n            </CardBody>\n        </Card>\n    );\n}\n\nfunction ColSelectInput(props){\n    const newColumnOption = (!props.newColumnLetter) ? null :\n        <option\n            key={props.newColumnLetter}\n            value={props.newColumnLetter}\n        >{props.newColumnLetter} - (nueva columna) </option>;\n    return(\n        <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n            <Label className={'mr-sm-2'}>{props.title}</Label>\n            <Input\n                name={props.name}\n                onChange={props.onChange}\n                type={'select'}\n                defaultValue={0}\n            >\n                <option disabled value={0}> Selecciona una columna </option>\n                {props.columns.map((col) => (\n                    <option\n                        key={col[0]}\n                        value={col[0]}\n                    >{col[0]} - {col[1]} </option>\n                ))}\n                {newColumnOption}\n            </Input>\n        </FormGroup>\n    );\n}\n\n\nexport default CedulaSearch;","import React from 'react';\nimport './App.css';\nimport CedulaSearch from \"./components/CedulaSearch\";\nimport {Container} from \"reactstrap\";\n\n\nfunction App() {\n    return (\n        <Container fluid className={'App d-flex justify-items-center align-items-center'}>\n            <CedulaSearch />\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\nif(module.hot){\n    module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}