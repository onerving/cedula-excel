{"version":3,"sources":["components/CedulaFinder.js","components/BasicDropzone.js","components/CedulaSearch.js","App.js","serviceWorker.js","index.js"],"names":["axios","require","getLicenseInfo","license","get","proxy","params","fl","rows","wt","q","crossDomain","makeServerQuery","then","res","data","response","docs","BasicDropzone","props","_useDropzone","useDropzone","accept","multiple","onDropAccepted","acceptedFiles","getRootProps","getInputProps","files","map","file","react_default","a","createElement","key","path","size","className","CedulaSearch","state","query","result","columns","searchAndSetResults","info","console","log","_this","setState","handleChange","event","target","value","firstStepCompleted","f","reader","FileReader","scope","Object","assertThisInitialized","onload","Uint8Array","workbook","XLSX","read","type","worksheet","Sheets","SheetNames","jsonWorksheet","utils","sheet_to_json","header","entries","readAsArrayBuffer","handleInputChange","e","_e$target","name","defineProperty","Container","Card","CardBody","CardTitle","components_BasicDropzone","this","Form","Row","form","Col","md","FormGroup","Label","Input","onChange","disabled","selected","col","placeholder","Button","Component","App","fluid","components_CedulaSearch","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.ed86c6fb.chunk.js","sourcesContent":["const axios = require('axios/index');\n\nexport function makeServerQuery(license){\n    const proxy = 'https://cors-anywhere.herokuapp.com/';\n    const url = \"http://search.sep.gob.mx/solr/cedulasCore/select?'\";\n\n    return axios.get(proxy+url, {\n        params:{\n            fl:'*,score',\n            rows: 1,\n            wt: 'json',\n            q: license,\n        },\n        crossDomain: true,\n    });\n}\n\nexport function getLicenseInfo(license){\n    return makeServerQuery(license).then(res => {\n        return res.data.response.docs[0];\n    });\n}\n\n\n","import React, {Component} from 'react';\nimport {useDropzone} from 'react-dropzone';\n\n\nfunction BasicDropzone(props){\n    const {acceptedFiles, getRootProps, getInputProps} = useDropzone ({\n        accept: '.xls,.xlsx',\n        multiple: false,\n        onDropAccepted: props.onDropAccepted\n\n    });\n\n    const files = acceptedFiles.map(file => (\n        <li key={file.path}>\n            {file.path} - {file.size} bytes\n        </li>\n    ));\n\n    return (\n        <section className=\"container\">\n            <div {...getRootProps({className: 'dropzone'})}>\n                <input {...getInputProps()} />\n                Arrastra tu archivo aquí, o da click para seleccionarlo.\n            </div>\n            <aside>\n                <ul>{files}</ul>\n            </aside>\n        </section>\n    );\n}\n\nexport default BasicDropzone;","import React, {Component} from 'react';\nimport {getLicenseInfo} from \"./CedulaFinder\";\nimport BasicDropzone from \"./BasicDropzone\";\nimport {Card, CardBody, Col, Container, Form, Jumbotron, Row, CardTitle, FormGroup, Input, Button} from 'reactstrap';\nimport XLSX from 'xlsx';\nimport Label from \"reactstrap/es/Label\";\n\nclass CedulaSearch extends Component {\n    state = {\n        query: '1629426',\n        result: {},\n        file: null,\n        columns: [],\n    };\n\n    componentDidMount() {\n    }\n\n    searchAndSetResults = (query) =>{\n        getLicenseInfo(query).then( info => {\n                console.log(info);\n                this.setState({result: info});\n            }\n        );\n    };\n\n    handleChange = (event) =>{\n        const query = event.target.value;\n        this.setState({query});\n        this.searchAndSetResults(query);\n    };\n\n\n    firstStepCompleted = (files) =>{\n        const f = files[0];\n        const reader = new FileReader();\n        const scope = this;\n        reader.onload = function(event) {\n            const data = new Uint8Array(event.target.result);\n            const workbook = XLSX.read(data, {type: 'array'});\n            let worksheet = workbook.Sheets[workbook.SheetNames[0]];\n            let jsonWorksheet = XLSX.utils.sheet_to_json(worksheet, {header: 'A'});\n            console.log(jsonWorksheet);\n            scope.setState({columns: Object.entries(jsonWorksheet[0]), worksheet: jsonWorksheet});\n        };\n        reader.readAsArrayBuffer(f);\n    };\n\n    handleInputChange = (e) => {\n        let {name, value} = e.target;\n        console.log(name + ' ' + value);\n        this.setState({\n            [name] : value\n        })\n    };\n\n    render() {\n        return (\n            <Container>\n                <h3>Verificador de cédulas profesionales</h3>\n                <Card>\n                    <CardBody>\n                        <CardTitle>\n                            <h4>Paso 1: Sube tu archivo de Excel</h4>\n                        </CardTitle>\n                        <BasicDropzone\n                            onDropAccepted={this.firstStepCompleted}\n                        />\n                    </CardBody>\n                </Card>\n                <Card>\n                    <CardBody>\n                        <CardTitle>\n                            <h4>Paso 2: configura de acuerdo a tu documento</h4>\n                        </CardTitle>\n                        <Form>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n                                        <Label className={'mr-sm-2'}>Columna donde están las cédulas: </Label>\n                                        <Input\n                                            name={'licenseCol'}\n                                            onChange={this.handleInputChange}\n                                            type={'select'}\n                                        >\n                                            <option disabled selected value> Selecciona una columna </option>\n                                            {this.state.columns.map((col) => (\n                                                <option\n                                                    key={col[0]}\n                                                    value={col[0]}\n                                                >{col[0]} - {col[1]} </option>\n                                            ))}\n                                        </Input>\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n                                        <Label className={'mr-sm-2'}>Columna de verificación: </Label>\n                                        <Input\n                                            name={'validationCol'}\n                                            onChange={this.handleInputChange}\n                                            type={'select'}\n                                        >\n                                            <option disabled selected value> Selecciona una columna </option>\n                                            {this.state.columns.map((col) => (\n                                                <option\n                                                    key={col[0]}\n                                                    value={col[0]}\n                                                >{col[0]} - {col[1]} </option>\n                                            ))}\n                                        </Input>\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col md={6}>\n                                    <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n                                        <Label className={'mr-sm-2'}>Poner en la fila de una cédula verificada:</Label>\n                                        <Input\n                                            placeholder={'Válida, 1, o, etc.'}\n                                            type={'text'}\n                                        />\n                                    </FormGroup>\n                                </Col>\n                                <Col md={6}>\n                                    <FormGroup className={'mb-2 mr-sm-2 mb-sm-0'}>\n                                        <Label className={'mr-sm-2'}>Poner en la fila de una cédula rechazada:</Label>\n                                        <Input\n                                            placeholder={'Inválida, 0, x, etc.'}\n                                            type={'text'}\n                                        />\n                                    </FormGroup>\n                                </Col>\n                            </Row>\n                            <Row form>\n                                <Col>\n                                    <Button type={'submit'}>Verificar cédulas</Button>\n                                </Col>\n                            </Row>\n                        </Form>\n                    </CardBody>\n                </Card>\n            </Container>\n        );\n    }\n}\n\n\nexport default CedulaSearch;","import React from 'react';\nimport './App.css';\nimport CedulaSearch from \"./components/CedulaSearch\";\nimport {Container} from \"reactstrap\";\n\n\nfunction App() {\n    return (\n        <Container fluid className={'App d-flex justify-items-center align-items-center'}>\n            <CedulaSearch />\n        </Container>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}